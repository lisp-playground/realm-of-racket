#lang racket
(zero? 42)
(zero? 0)
(symbol=? 'a 'b)

(struct student (name id# dorm) #:transparent)
(define sophomore3 (student 'David 100234 'PG))
(student-name sophomore3)
(student? 'a)
(student? sophomore3)
(student? (student 1 2 3))
(student? "I am student")

(number? 'a)
(string? "hello world")

 (symbol? 'a)
;; (image? 10)
(boolean? "false")

(list? 'eh)
(cons? '(what is that about?))
(list? '())
(empty? 'a)

(real? 10)
(real? (sqrt -1))
(rational? 2/3)
(integer? 1.0)
(integer? 1)
(exact-integer? 1.0)

(= 1 2)
(= (sqrt -1) 0+1i)
(boolean=? #f #f)
(string=? "hello world" "good bye")
;(= "hello workd" "good bye")
(equal? (student 'David 100234 'PG) sophomore3)
(equal? '(1 2 3) '(1 2 3))
(equal? 'a 'b)
(equal? "hello world" 'a)
(equal? 10 10)
(equal? #t 10)
(equal? #t #t)
(define (add-to-front-of-123 x)
  (cons x '(1 2 3)))
(add-to-front-of-123 'a)
(add-to-front-of-123 0)
(add-to-front-of-123 '(a b c))